import math
import sys

templateH = """/*
*	THIS FILE IS GENERATED BY A SCRIPT
*	Modify sinTableCreator2.py to change, otherwise it will be changed during the next build
*/
#ifndef SIN_TABLE
#define SIN_TABLE

//Note: sin values are defined for powers of 2 from 2^1 to 2^%(power)s = %(maxValue)s

float sin(unsigned int x);

#endif
"""

templateC = """
#include "sin.h"
#include "Debug.h"

/*
	returns sin(2*pi / x)
	works only for x = powers of two from 2^1 to 2^%(power)s = %(maxValue)s
*/
float sin(unsigned int x)
{
	switch(x)
	{
%(cases)s
		default:
			Debug("Invalid sin lookup")
			return -1.0;
	}
}

"""

caseLine = "		case %(request)s: return %(result)s;"

def createCodeFile1(maxPower):
	dict = {}
	dict['power'] = maxPower
	dict['maxValue'] = 2 ** maxPower
	
	cases = '\n'.join([caseLine % {'request' : 2**n, 'result' : math.sin(2.0 * math.pi / (2**n))} for n in range(1, maxPower+1)])
	dict['cases'] = cases
	
	result = templateC % dict
	open('sin.c', 'w').write(result)
	


templateC2 = """#include "sin.h"

const float data[%(maxPowerPlusOne)s] = {
%(data)s
};

float sin(unsigned int x)
{
	unsigned short n;
	for(n=%(maxPower)s; (1<<n) > x;n--) {}
	return data[n];
}"""

def createCodeFile2(maxPower):
	dict = {}
	dict['maxPowerPlusOne'] = maxPower + 1
	dict['maxPower'] = maxPower
	dict['data'] = ',\n'.join(['-1'] + [str(math.sin(2.0 * math.pi / 2**n)) for n in range(1, maxPower+1)])
	
	result = templateC2 % dict
	open('sin.c', 'w').write(result)
	
def createHeaderFile(maxPower):
	result = templateH % {'power' : maxPower, 'maxValue' : 2 ** maxPower}
	open('sin.h', 'w').write(templateH)

"""
Pass in the desired length of the sin table that will be produced, 
and the base of the output filename (no extension, will produce <name>.h and <name>.c
"""
def main():
	maxPower = int(sys.argv[1])
		
	createHeaderFile(maxPower)
	createCodeFile2(maxPower)
	
if __name__ == "__main__":		
	main()
